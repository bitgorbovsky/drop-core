#!/opt/drop-pyenv/bin/python

#
# System init info
#
# params
# $1 - node_name
# $2 - time interval in sec
#

import sys
import time
import psutil as ps
import os
import docker
import json

# API


def read():
    line = sys.stdin.readline()
    return line.strip()


def log(m):
    sys.stderr.write("{}: {}\n".format(time.time(), m))
    sys.stderr.flush()


def send(m):
    sys.stdout.write("{}\n".format(m))
    sys.stdout.flush()

# Process - actor
#  read - recieve message from world
#  send - send message to world
#  log  -  logging anything


def main(node, t):
    """
        t - time interval in secs
    """

    msg = read()
    log("get message: " + msg)

    while 1:

        log("tick..")

        # nodes
        resp = get_node_stat(node)
        send(resp)

        # ppols
        for i in get_ppool_stat(node):
            send(i)

        time.sleep(int(t))


def get_ppool_stat(node):
    """
    base ppools stat
    """

    ppool = {}
    stats = []

    for proc in ps.process_iter():

        try:

            pinfo = proc.as_dict(attrs=["pid", "name", "cmdline",
                                        "cpu_percent", "memory_percent"])

            if "-drop" in pinfo["cmdline"]:

                # get identity group
                pname = pinfo["cmdline"][pinfo["cmdline"].index("-drop") + 1]

                cnt, pp, mp = ppool.get(pname, [0, 0, 0])

                ppool[pname] = [cnt + 1, pp + pinfo["cpu_percent"],
                                mp + pinfo["memory_percent"]]

        except Exception as e:
            log("error: {}".format(e))

    # docker stats

    if os.environ.get("IS_DOCKER") == "1":

        try:

            c = docker.from_env()
            plist = {}
            for k in c.containers.list():
                proc = ps.Process(k.attrs["State"]["Pid"])

                # get identity group
                pname = k.attrs["Config"]["Image"].split(":")[0]

                proc.as_dict(attrs=["pid", "name", "cmdline",
                                    "cpu_percent", "memory_percent"])

                plist[pname] = proc

            time.sleep(1)

            for pname, proc in plist.iteritems():

                pinfo = proc.as_dict(attrs=["pid", "name", "cmdline",
                                            "cpu_percent", "memory_percent"])

                cnt, pp, mp = ppool.get(pname, [0, 0, 0])

                ppool[pname] = [cnt + 1, pp + pinfo["cpu_percent"],
                                mp + pinfo["memory_percent"]]

        except Exception as e:
            log("error: {}".format(e))

    _trace = '{{"tag":"ppool_{}", "values":{}, "labels":{} }}'

    for k, v in ppool.items():
        ppool_stat = '{{"tag":"ppool_stat", "node": "{}", "name": "{}",\
                        "count":{}, "cpu_percent": {}, "ram_percent": {}, "_trace": {}\
                        }}'.format(node,
                                   k,
                                   v[0],
                                   v[1],
                                   v[2],
                                   _trace.format(k + node, [v[1], v[2], (v[1] + v[2])/2],
                                                 json.dumps(["cpu", "ram", "mid"]))
                                   )

        stats.append(ppool_stat)

    return stats


def get_node_stat(node):

    """
    base node stats
    """
    _trace = '{{"tag":"node_{}", "values":{}, "labels":{} }}'

    mem = map(int, os.popen('free -t -m').readlines()[1].split()[1:])  # ps.virtual_memory()
    disk = ps.disk_usage("/")
    cpu_p = ps.cpu_percent()

    node_stat = '{{"tag":"node_stat", "node": "{}", "cpu_count": {},"cpu_percent": {},\
                   "ram_count": {},"ram_percent": {},"disk_count": {},\
                   "disk_percent": {}, "net_count": {}, "_trace": {}\
                   }}'.format(node,
                              ps.cpu_count(),
                              cpu_p,
                              mem[0],
                              (1 - mem[5]*1.0/mem[0])*100,
                              disk[0]/(1024*1024),
                              disk[3],
                              len(ps.net_connections(kind="all")),
                              _trace.format(node, [cpu_p, (1 - mem[5]*1.0/mem[0])*100, disk[3]],
                                            json.dumps(["cpu", "ram", "disk"]))
                              )

    return node_stat


if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2])
